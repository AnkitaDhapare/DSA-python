#singly linked list
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Singly Linked List
class SinglyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_end(self, data):
        new_node = Node(data)
        if not self.head: # is head empty
            self.head = new_node
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = new_node

    def display(self):
        curr = self.head
        while curr:
            print(curr.data, end=" -> ")
            curr = curr.next
        print("None")

# Example
sll = SinglyLinkedList()
sll.insert_at_end(10)
sll.insert_at_end(20)
sll.insert_at_end(30)
sll.display()



# doubly linked list
class DNode:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

# Doubly Linked List
class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_end(self, data):
        new_node = DNode(data)
        if not self.head:
            self.head = new_node
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = new_node
        new_node.prev = curr

    def display(self):
        curr = self.head
        while curr:
            print(curr.data, end=" <-> ")
            curr = curr.next
        print("None")

# Example
dll = DoublyLinkedList()
dll.insert_at_end(100)
dll.insert_at_end(200)
dll.insert_at_end(300)
dll.display()




# circular singly linked list
class CNode:
    def __init__(self, data):
        self.data = data
        self.next = None

# Circular Singly Linked List
class CircularSinglyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_end(self, data):
        new_node = CNode(data)
        if not self.head:  #if list is empty
            self.head = new_node
            new_node.next = self.head #  to maintain circularity. #In a circular list, even a single node must point to itself.
            return
        curr = self.head  #if list is not empty
        while curr.next != self.head:
            curr = curr.next
        curr.next = new_node #Link the last node to the new node
        new_node.next = self.head #  link new_node.next back to the head to preserve circularity.

    def display(self):
        if not self.head:
            print("Empty List")
            return
        curr = self.head
        while True:
            print(curr.data, end=" -> ")
            curr = curr.next
            if curr == self.head:
                break
        print("(back to head)")

# Example
csll = CircularSinglyLinkedList()
csll.insert_at_end(5)
csll.insert_at_end(10)
csll.insert_at_end(15)
csll.display()




# circular doubly linked list
class CDNode:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

# Circular Doubly Linked List
class CircularDoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_end(self, data):
        new_node = CDNode(data)
        if not self.head:
            self.head = new_node
            new_node.next = new_node.prev = new_node #maintains both circularity and doubly-linked nature even with one node.
            return
        last = self.head.prev #ircular doubly linked list, the previous of head (head.prev) is the last node.
        last.next = new_node
        new_node.prev = last
        new_node.next = self.head 
        self.head.prev = new_node

    def display(self):
        if not self.head:
            print("Empty List")
            return
        curr = self.head
        while True:
            print(curr.data, end=" <-> ")
            curr = curr.next
            if curr == self.head:
                break
        print("(back to head)")

# Example
cdll = CircularDoublyLinkedList()
cdll.insert_at_end(50)
cdll.insert_at_end(60)
cdll.insert_at_end(70)
cdll.display()
